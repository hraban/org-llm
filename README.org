#+title: org-llm Emacs Package integration Org-Mode and LLMs

Highly WIP and POC so caveat emptor and good luck on your journey.

* Usage

This README is itself a demo of the code. Adapt the configuration below as necessary and execute the block (=C-c C-c=):
** Configuration
#+begin_src emacs-lisp
;; If you need it
;(normal-top-level-add-to-load-path '("/path/to/org-llm/"))

(require 'llm-openai)
(require 'org-llm)

;; If you don‚Äôt want to store a raw API key
(defvar my-openai-key
  (string-trim (shell-command-to-string "read secret from your password manager somehow")))

(setq org-llm/provider
  (make-llm-openai
   :key my-openai-key
   :chat-model "gpt-4-turbo-preview"))

;; Bind all keys to the ‚ÄòC-c l‚Äô prefix.
(keymap-global-set "C-c l" org-llm/map)

;; Convenience
(setq org-confirm-babel-evaluate nil)
(setq llm-warn-on-nonfree nil)
#+end_src

Then have a conversation

** Conversations



*** Conversation Template
:PROPERTIES:
:LLM_CONVERSATION: T
:END:

Copy and paste this entire subtree, adapt as needed, and hit =C-c l s= for a demonstration

**** Context

Put a context here if you want

**** Prompt

Your chat prompt

*** Demo conversation
:PROPERTIES:
:LLM_CONVERSATION: T
:END:

It will add a new ‚ÄúResponse‚Äù header, and a ‚ÄúPrompt‚Äù header for your next input:

**** Context

You are a chatbot whose messages are recorded in a public README of a project please be polite but very succinct so as not to distract too much

**** Prompt

Please introduce yourself

**** Response

I am an AI developed to assist with inquiries and provide information. How may I help you today?

**** Prompt

* Installation

This package is available through Nix.

The Emacs packages delivery story over flakes is kind of a mess, but this is my attempt at providing a reasonable solution. It‚Äôs based off [[https://nixos.wiki/wiki/Emacs#Installing_packages][the installation guide]]. Basically, where they do =callPackage ...=, you would instead this flake‚Äôs =emacsPackages.default= instead of that local file.

Example in home-manager:

#+begin_src nix
home.programs.emacs = {
  ...

  extraPackages = epkgs: [
    ...
    (callPackage org-llm.emacsPackages.default {
      inherit (pkgs) lib;
      inherit (epkgs) trivialBuild dash llm;
    })
  ];
}
#+end_src

Of course this locks you in to specifying the dependencies explicitly, which can change later. I personally do this instead but it‚Äôs pretty ugly:

#+begin_src nix
  ((pkgs.lib.callPackageWith (pkgs // epkgs)) org-llm.emacsPackages.default {})
#+end_src

ü§∑ Nix.
